//------------------------------------------------------------------------------
// <auto-generated>
//     This code was auto-generated by com.unity.inputsystem:InputActionCodeGenerator
//     version 1.8.1
//     from Assets/controls/BattleInputs.inputactions
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

using System;
using System.Collections;
using System.Collections.Generic;
using UnityEngine.InputSystem;
using UnityEngine.InputSystem.Utilities;
using UnityEngine;

public partial class @BattleInputs: IInputActionCollection2, IDisposable
{
    public InputActionAsset asset { get; }
    public @BattleInputs()
    {
        asset = InputActionAsset.FromJson(@"{
    ""name"": ""BattleInputs"",
    ""maps"": [
        {
            ""name"": ""battle"",
            ""id"": ""1ab93d3f-bf4e-410d-a036-c6e5c86510d4"",
            ""actions"": [],
            ""bindings"": []
        },
        {
            ""name"": ""strategy"",
            ""id"": ""c1261fa6-40dd-4763-bda3-c367496a3506"",
            ""actions"": [
                {
                    ""name"": ""MouseLeftClick"",
                    ""type"": ""Button"",
                    ""id"": ""f7f4c1d6-41a3-4865-b927-5186d9091273"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""MouseRightClick"",
                    ""type"": ""Button"",
                    ""id"": ""dd44bda0-f0e5-46fb-8587-4da43d7e3a46"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                }
            ],
            ""bindings"": [
                {
                    ""name"": """",
                    ""id"": ""ac2a47d4-c3ab-463c-bc7b-06a1e504d195"",
                    ""path"": ""<Mouse>/leftButton"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""MouseLeftClick"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""0879347e-153e-4fb9-a8a7-90b79d9e2275"",
                    ""path"": ""<Mouse>/rightButton"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""MouseRightClick"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                }
            ]
        },
        {
            ""name"": ""common"",
            ""id"": ""5314ec31-f75f-4809-8f35-93480cdb136d"",
            ""actions"": [
                {
                    ""name"": ""StartBattle"",
                    ""type"": ""Button"",
                    ""id"": ""98f18d3e-1c6e-4bbc-9394-6874d4b685e0"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""EndBattle"",
                    ""type"": ""Button"",
                    ""id"": ""72f39f24-1975-4836-bb5d-45ecdd987fa7"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""escape"",
                    ""type"": ""Button"",
                    ""id"": ""82845853-e9f1-4a41-99f9-ef3e849d4348"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                }
            ],
            ""bindings"": [
                {
                    ""name"": """",
                    ""id"": ""9d870f3d-2922-431f-bd01-e80b4a97b32d"",
                    ""path"": ""<Keyboard>/o"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""StartBattle"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""f3d2aeca-1019-41b2-8a64-98579d525506"",
                    ""path"": ""<Keyboard>/p"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""EndBattle"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""72f9cffb-d5aa-4ed3-a1fc-0374bb7368dc"",
                    ""path"": ""<Keyboard>/escape"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""escape"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                }
            ]
        },
        {
            ""name"": ""camera-movement"",
            ""id"": ""d81e92b4-91ae-4875-9af3-bd4d56603809"",
            ""actions"": [
                {
                    ""name"": ""WASD"",
                    ""type"": ""PassThrough"",
                    ""id"": ""8a364afb-a8de-43c5-ba13-d70a58c493c6"",
                    ""expectedControlType"": ""Vector2"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""mouseScroll"",
                    ""type"": ""PassThrough"",
                    ""id"": ""e2209633-54c9-4c00-ad62-b8ef53c4b1f3"",
                    ""expectedControlType"": ""Axis"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                }
            ],
            ""bindings"": [
                {
                    ""name"": ""2D Vector"",
                    ""id"": ""68086c86-b2fe-41e5-9c9c-8d694c342a0b"",
                    ""path"": ""2DVector"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""WASD"",
                    ""isComposite"": true,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": ""up"",
                    ""id"": ""0108c43c-d313-422d-94af-4337412ddb55"",
                    ""path"": ""<Keyboard>/w"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""WASD"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": ""down"",
                    ""id"": ""528d80ad-327a-40ed-b8f3-08bcc8c0676e"",
                    ""path"": ""<Keyboard>/s"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""WASD"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": ""left"",
                    ""id"": ""21f827aa-f1cd-47ac-8251-d8c6dfe2c4ac"",
                    ""path"": ""<Keyboard>/a"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""WASD"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": ""right"",
                    ""id"": ""592be440-fc14-49f4-b284-cb06d705388f"",
                    ""path"": ""<Keyboard>/d"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""WASD"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": ""1D Axis"",
                    ""id"": ""2d0df34c-ac08-4aac-a41d-d4a9dd896913"",
                    ""path"": ""1DAxis"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""mouseScroll"",
                    ""isComposite"": true,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": ""positive"",
                    ""id"": ""9bb4f783-1001-401f-90f5-4c946451dd9b"",
                    ""path"": ""<Mouse>/scroll/down"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""mouseScroll"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": ""negative"",
                    ""id"": ""5ebdf5b3-64fa-4f66-b6ad-b0218bcdc66c"",
                    ""path"": ""<Mouse>/scroll/up"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""mouseScroll"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                }
            ]
        }
    ],
    ""controlSchemes"": []
}");
        // battle
        m_battle = asset.FindActionMap("battle", throwIfNotFound: true);
        // strategy
        m_strategy = asset.FindActionMap("strategy", throwIfNotFound: true);
        m_strategy_MouseLeftClick = m_strategy.FindAction("MouseLeftClick", throwIfNotFound: true);
        m_strategy_MouseRightClick = m_strategy.FindAction("MouseRightClick", throwIfNotFound: true);
        // common
        m_common = asset.FindActionMap("common", throwIfNotFound: true);
        m_common_StartBattle = m_common.FindAction("StartBattle", throwIfNotFound: true);
        m_common_EndBattle = m_common.FindAction("EndBattle", throwIfNotFound: true);
        m_common_escape = m_common.FindAction("escape", throwIfNotFound: true);
        // camera-movement
        m_cameramovement = asset.FindActionMap("camera-movement", throwIfNotFound: true);
        m_cameramovement_WASD = m_cameramovement.FindAction("WASD", throwIfNotFound: true);
        m_cameramovement_mouseScroll = m_cameramovement.FindAction("mouseScroll", throwIfNotFound: true);
    }

    ~@BattleInputs()
    {
        Debug.Assert(!m_battle.enabled, "This will cause a leak and performance issues, BattleInputs.battle.Disable() has not been called.");
        Debug.Assert(!m_strategy.enabled, "This will cause a leak and performance issues, BattleInputs.strategy.Disable() has not been called.");
        Debug.Assert(!m_common.enabled, "This will cause a leak and performance issues, BattleInputs.common.Disable() has not been called.");
        Debug.Assert(!m_cameramovement.enabled, "This will cause a leak and performance issues, BattleInputs.cameramovement.Disable() has not been called.");
    }

    public void Dispose()
    {
        UnityEngine.Object.Destroy(asset);
    }

    public InputBinding? bindingMask
    {
        get => asset.bindingMask;
        set => asset.bindingMask = value;
    }

    public ReadOnlyArray<InputDevice>? devices
    {
        get => asset.devices;
        set => asset.devices = value;
    }

    public ReadOnlyArray<InputControlScheme> controlSchemes => asset.controlSchemes;

    public bool Contains(InputAction action)
    {
        return asset.Contains(action);
    }

    public IEnumerator<InputAction> GetEnumerator()
    {
        return asset.GetEnumerator();
    }

    IEnumerator IEnumerable.GetEnumerator()
    {
        return GetEnumerator();
    }

    public void Enable()
    {
        asset.Enable();
    }

    public void Disable()
    {
        asset.Disable();
    }

    public IEnumerable<InputBinding> bindings => asset.bindings;

    public InputAction FindAction(string actionNameOrId, bool throwIfNotFound = false)
    {
        return asset.FindAction(actionNameOrId, throwIfNotFound);
    }

    public int FindBinding(InputBinding bindingMask, out InputAction action)
    {
        return asset.FindBinding(bindingMask, out action);
    }

    // battle
    private readonly InputActionMap m_battle;
    private List<IBattleActions> m_BattleActionsCallbackInterfaces = new List<IBattleActions>();
    public struct BattleActions
    {
        private @BattleInputs m_Wrapper;
        public BattleActions(@BattleInputs wrapper) { m_Wrapper = wrapper; }
        public InputActionMap Get() { return m_Wrapper.m_battle; }
        public void Enable() { Get().Enable(); }
        public void Disable() { Get().Disable(); }
        public bool enabled => Get().enabled;
        public static implicit operator InputActionMap(BattleActions set) { return set.Get(); }
        public void AddCallbacks(IBattleActions instance)
        {
            if (instance == null || m_Wrapper.m_BattleActionsCallbackInterfaces.Contains(instance)) return;
            m_Wrapper.m_BattleActionsCallbackInterfaces.Add(instance);
        }

        private void UnregisterCallbacks(IBattleActions instance)
        {
        }

        public void RemoveCallbacks(IBattleActions instance)
        {
            if (m_Wrapper.m_BattleActionsCallbackInterfaces.Remove(instance))
                UnregisterCallbacks(instance);
        }

        public void SetCallbacks(IBattleActions instance)
        {
            foreach (var item in m_Wrapper.m_BattleActionsCallbackInterfaces)
                UnregisterCallbacks(item);
            m_Wrapper.m_BattleActionsCallbackInterfaces.Clear();
            AddCallbacks(instance);
        }
    }
    public BattleActions @battle => new BattleActions(this);

    // strategy
    private readonly InputActionMap m_strategy;
    private List<IStrategyActions> m_StrategyActionsCallbackInterfaces = new List<IStrategyActions>();
    private readonly InputAction m_strategy_MouseLeftClick;
    private readonly InputAction m_strategy_MouseRightClick;
    public struct StrategyActions
    {
        private @BattleInputs m_Wrapper;
        public StrategyActions(@BattleInputs wrapper) { m_Wrapper = wrapper; }
        public InputAction @MouseLeftClick => m_Wrapper.m_strategy_MouseLeftClick;
        public InputAction @MouseRightClick => m_Wrapper.m_strategy_MouseRightClick;
        public InputActionMap Get() { return m_Wrapper.m_strategy; }
        public void Enable() { Get().Enable(); }
        public void Disable() { Get().Disable(); }
        public bool enabled => Get().enabled;
        public static implicit operator InputActionMap(StrategyActions set) { return set.Get(); }
        public void AddCallbacks(IStrategyActions instance)
        {
            if (instance == null || m_Wrapper.m_StrategyActionsCallbackInterfaces.Contains(instance)) return;
            m_Wrapper.m_StrategyActionsCallbackInterfaces.Add(instance);
            @MouseLeftClick.started += instance.OnMouseLeftClick;
            @MouseLeftClick.performed += instance.OnMouseLeftClick;
            @MouseLeftClick.canceled += instance.OnMouseLeftClick;
            @MouseRightClick.started += instance.OnMouseRightClick;
            @MouseRightClick.performed += instance.OnMouseRightClick;
            @MouseRightClick.canceled += instance.OnMouseRightClick;
        }

        private void UnregisterCallbacks(IStrategyActions instance)
        {
            @MouseLeftClick.started -= instance.OnMouseLeftClick;
            @MouseLeftClick.performed -= instance.OnMouseLeftClick;
            @MouseLeftClick.canceled -= instance.OnMouseLeftClick;
            @MouseRightClick.started -= instance.OnMouseRightClick;
            @MouseRightClick.performed -= instance.OnMouseRightClick;
            @MouseRightClick.canceled -= instance.OnMouseRightClick;
        }

        public void RemoveCallbacks(IStrategyActions instance)
        {
            if (m_Wrapper.m_StrategyActionsCallbackInterfaces.Remove(instance))
                UnregisterCallbacks(instance);
        }

        public void SetCallbacks(IStrategyActions instance)
        {
            foreach (var item in m_Wrapper.m_StrategyActionsCallbackInterfaces)
                UnregisterCallbacks(item);
            m_Wrapper.m_StrategyActionsCallbackInterfaces.Clear();
            AddCallbacks(instance);
        }
    }
    public StrategyActions @strategy => new StrategyActions(this);

    // common
    private readonly InputActionMap m_common;
    private List<ICommonActions> m_CommonActionsCallbackInterfaces = new List<ICommonActions>();
    private readonly InputAction m_common_StartBattle;
    private readonly InputAction m_common_EndBattle;
    private readonly InputAction m_common_escape;
    public struct CommonActions
    {
        private @BattleInputs m_Wrapper;
        public CommonActions(@BattleInputs wrapper) { m_Wrapper = wrapper; }
        public InputAction @StartBattle => m_Wrapper.m_common_StartBattle;
        public InputAction @EndBattle => m_Wrapper.m_common_EndBattle;
        public InputAction @escape => m_Wrapper.m_common_escape;
        public InputActionMap Get() { return m_Wrapper.m_common; }
        public void Enable() { Get().Enable(); }
        public void Disable() { Get().Disable(); }
        public bool enabled => Get().enabled;
        public static implicit operator InputActionMap(CommonActions set) { return set.Get(); }
        public void AddCallbacks(ICommonActions instance)
        {
            if (instance == null || m_Wrapper.m_CommonActionsCallbackInterfaces.Contains(instance)) return;
            m_Wrapper.m_CommonActionsCallbackInterfaces.Add(instance);
            @StartBattle.started += instance.OnStartBattle;
            @StartBattle.performed += instance.OnStartBattle;
            @StartBattle.canceled += instance.OnStartBattle;
            @EndBattle.started += instance.OnEndBattle;
            @EndBattle.performed += instance.OnEndBattle;
            @EndBattle.canceled += instance.OnEndBattle;
            @escape.started += instance.OnEscape;
            @escape.performed += instance.OnEscape;
            @escape.canceled += instance.OnEscape;
        }

        private void UnregisterCallbacks(ICommonActions instance)
        {
            @StartBattle.started -= instance.OnStartBattle;
            @StartBattle.performed -= instance.OnStartBattle;
            @StartBattle.canceled -= instance.OnStartBattle;
            @EndBattle.started -= instance.OnEndBattle;
            @EndBattle.performed -= instance.OnEndBattle;
            @EndBattle.canceled -= instance.OnEndBattle;
            @escape.started -= instance.OnEscape;
            @escape.performed -= instance.OnEscape;
            @escape.canceled -= instance.OnEscape;
        }

        public void RemoveCallbacks(ICommonActions instance)
        {
            if (m_Wrapper.m_CommonActionsCallbackInterfaces.Remove(instance))
                UnregisterCallbacks(instance);
        }

        public void SetCallbacks(ICommonActions instance)
        {
            foreach (var item in m_Wrapper.m_CommonActionsCallbackInterfaces)
                UnregisterCallbacks(item);
            m_Wrapper.m_CommonActionsCallbackInterfaces.Clear();
            AddCallbacks(instance);
        }
    }
    public CommonActions @common => new CommonActions(this);

    // camera-movement
    private readonly InputActionMap m_cameramovement;
    private List<ICameramovementActions> m_CameramovementActionsCallbackInterfaces = new List<ICameramovementActions>();
    private readonly InputAction m_cameramovement_WASD;
    private readonly InputAction m_cameramovement_mouseScroll;
    public struct CameramovementActions
    {
        private @BattleInputs m_Wrapper;
        public CameramovementActions(@BattleInputs wrapper) { m_Wrapper = wrapper; }
        public InputAction @WASD => m_Wrapper.m_cameramovement_WASD;
        public InputAction @mouseScroll => m_Wrapper.m_cameramovement_mouseScroll;
        public InputActionMap Get() { return m_Wrapper.m_cameramovement; }
        public void Enable() { Get().Enable(); }
        public void Disable() { Get().Disable(); }
        public bool enabled => Get().enabled;
        public static implicit operator InputActionMap(CameramovementActions set) { return set.Get(); }
        public void AddCallbacks(ICameramovementActions instance)
        {
            if (instance == null || m_Wrapper.m_CameramovementActionsCallbackInterfaces.Contains(instance)) return;
            m_Wrapper.m_CameramovementActionsCallbackInterfaces.Add(instance);
            @WASD.started += instance.OnWASD;
            @WASD.performed += instance.OnWASD;
            @WASD.canceled += instance.OnWASD;
            @mouseScroll.started += instance.OnMouseScroll;
            @mouseScroll.performed += instance.OnMouseScroll;
            @mouseScroll.canceled += instance.OnMouseScroll;
        }

        private void UnregisterCallbacks(ICameramovementActions instance)
        {
            @WASD.started -= instance.OnWASD;
            @WASD.performed -= instance.OnWASD;
            @WASD.canceled -= instance.OnWASD;
            @mouseScroll.started -= instance.OnMouseScroll;
            @mouseScroll.performed -= instance.OnMouseScroll;
            @mouseScroll.canceled -= instance.OnMouseScroll;
        }

        public void RemoveCallbacks(ICameramovementActions instance)
        {
            if (m_Wrapper.m_CameramovementActionsCallbackInterfaces.Remove(instance))
                UnregisterCallbacks(instance);
        }

        public void SetCallbacks(ICameramovementActions instance)
        {
            foreach (var item in m_Wrapper.m_CameramovementActionsCallbackInterfaces)
                UnregisterCallbacks(item);
            m_Wrapper.m_CameramovementActionsCallbackInterfaces.Clear();
            AddCallbacks(instance);
        }
    }
    public CameramovementActions @cameramovement => new CameramovementActions(this);
    public interface IBattleActions
    {
    }
    public interface IStrategyActions
    {
        void OnMouseLeftClick(InputAction.CallbackContext context);
        void OnMouseRightClick(InputAction.CallbackContext context);
    }
    public interface ICommonActions
    {
        void OnStartBattle(InputAction.CallbackContext context);
        void OnEndBattle(InputAction.CallbackContext context);
        void OnEscape(InputAction.CallbackContext context);
    }
    public interface ICameramovementActions
    {
        void OnWASD(InputAction.CallbackContext context);
        void OnMouseScroll(InputAction.CallbackContext context);
    }
}
